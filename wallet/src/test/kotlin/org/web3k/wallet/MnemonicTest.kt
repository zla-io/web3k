package org.web3k.wallet

import org.bouncycastle.util.encoders.Hex
import org.jetbrains.spek.api.Spek
import org.jetbrains.spek.api.dsl.given
import org.jetbrains.spek.api.dsl.it
import org.jetbrains.spek.api.dsl.on
import org.junit.jupiter.api.Assertions.assertArrayEquals
import org.junit.jupiter.api.Assertions.assertEquals
import java.io.File

object MnemonicTest : Spek({
    // Path to test vectors generated by the BIP 39 reference implementation. Each
    // test vector include input entropy, mnemonic and seed. The passphrase "TREZOR"
    // is used for all vectors.
    // See https://github.com/trezor/python-mnemonic/blob/master/vectors.json
    val sampleFile: String = Thread.currentThread()
            .contextClassLoader
            .getResource("test-vectors.txt")
            .path

    // Loads the test vectors into a in-memory list and feed them one after another to
    // our parameterized tests.
    val data = File(sampleFile).readLines()
    val samples = (0 until data.size step 4)
            .map { data.subList(it, it + 3) }

    given("MnemonicTest") {

        for (sample in samples) {

            on("sample $sample") {

                it("generateMnemonic should generate expected mnemonic words") {
                    val actualMnemonic = generateMnemonic(sample.initialEntropy)
                    assertEquals(sample.mnemonic, actualMnemonic)
                }

                it("generateSeed should generate expected seeds") {
                    val actualSeed = generateSeed(sample.mnemonic, "TREZOR")
                    assertArrayEquals(sample.seed, actualSeed)
                }
            }
        }
    }
})

/**
 * The initial entropy for the current test vector. This entropy should be used
 * to generate mnemonic and seed.
 */
private val List<String>.initialEntropy: ByteArray
    get() = Hex.decode(get(0))

/**
 * Expected mnemonic for the given [initialEntropy].
 */
private val List<String>.mnemonic: String
    get() = get(1)

/**
 * Expected seed based on the calculated [mnemonic] and default passphrase.
 */
private val List<String>.seed: ByteArray
    get() = Hex.decode(get(2))
